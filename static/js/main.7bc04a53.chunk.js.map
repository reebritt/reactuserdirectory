{"version":3,"sources":["DefaultColumnFilter.js","App.js","reportWebVitals.js","index.js"],"names":["DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","count","length","value","onChange","e","target","undefined","placeholder","App","useState","loading","data","randomUserTableData","setRandomUserTableData","useEffect","fetch","then","response","json","results","columns","React","useMemo","Header","accessor","defaultColumn","Filter","useTable","useFilters","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","style","border","map","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","borderBottom","background","color","fontWeight","render","canFilter","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","padding","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"iNAkBeA,MAhBf,YAEI,IAAD,IADCC,OAAUC,EACX,EADWA,YAAaC,EACxB,EADwBA,gBAAiBC,EACzC,EADyCA,UAElCC,EAAQF,EAAgBG,OAE9B,OACI,uBACIC,MAAOL,GAAe,GACtBM,SAAU,SAAAC,GACNL,EAAUK,EAAEC,OAAOH,YAASI,IAEhCC,YAAW,iBAAYP,EAAZ,kBCsGRQ,MAhHf,WACE,MAAsDC,mBAAS,CAC7DC,SAAQ,EAAMC,KAAK,KADrB,mBAAOC,EAAP,KAA4BC,EAA5B,KAGAC,qBAAU,WACRC,MAAM,yCACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GACLJ,EAAuB,CACrBF,KAAMM,EAASE,QACfT,SAAS,SAGd,IAEH,IAAMU,EAAUC,IAAMC,SACpB,iBAAM,CACJ,CACEC,OAAQ,SACRC,SAAU,UAEZ,CACED,OAAQ,YACRC,SAAU,cAEZ,CACED,OAAQ,WACRC,SAAU,gBAGd,IAEIC,EAAgBJ,IAAMC,SAC1B,iBAAO,CAELI,OAAQ/B,KAEV,IAEF,EAMIgC,mBAAS,CAAEP,UAAST,KAAKC,EAAoBD,KAAMc,iBAAgBG,aAAYC,aALjFC,EADF,EACEA,cACAC,EAFF,EAEEA,kBACAC,EAHF,EAGEA,aACAC,EAJF,EAIEA,KACAC,EALF,EAKEA,WAIF,OAAItB,EAAoBF,QAEpB,6CAMF,cAAC,WAAD,UACG,kDAAWoB,KAAX,IAA4BK,MAAO,CAAEC,OAAQ,kBAA7C,UACA,gCACGJ,EAAaK,KAAI,SAAAC,GAAW,OAC3B,8CAAQA,EAAYC,uBAApB,aACGD,EAAYE,QAAQH,KAAI,SAAAzC,GAAM,OAC7B,+CACMA,EAAO6C,eAAe7C,EAAO8C,yBADnC,IAEEP,MAAO,CACLQ,aAAc,gBACdC,WAAY,YACZC,MAAO,QACPC,WAAY,QANhB,UASGlD,EAAOmD,OAAO,UACf,8BAAMnD,EAAOoD,UAAYpD,EAAOmD,OAAO,UAAY,OAClDnD,EAAOqD,SACDrD,EAAOsD,aACL,gBACA,gBACF,kBAMjB,iDAAWnB,KAAX,aACGE,EAAKI,KAAI,SAAAc,GAER,OADAjB,EAAWiB,GAET,8CAAQA,EAAIC,eAAZ,aACGD,EAAIE,MAAMhB,KAAI,SAAAiB,GACb,OACE,8CACMA,EAAKC,gBADX,IAEEpB,MAAO,CACLqB,QAAS,OACTpB,OAAQ,iBACRQ,WAAY,cALhB,SAQGU,EAAKP,OAAO,8BCzFnBU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3C,MAAK,YAAkD,IAA/C4C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASlB,OACP,cAAC,IAAMmB,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.7bc04a53.chunk.js","sourcesContent":["import React from 'react'\n\nfunction DefaultColumnFilter({\n    column: { filterValue, preFilteredRows, setFilter },\n}) {\n    const count = preFilteredRows.length\n\n    return (\n        <input\n            value={filterValue || ''}\n            onChange={e => {\n                setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n            }}\n            placeholder={`Search ${count} records...`}\n        />\n    )\n}\n\nexport default DefaultColumnFilter","import React, { Fragment, useEffect, useState } from \"react\";\nimport { useTable, useSortBy, useFilters, UseFiltersOptions } from 'react-table';\nimport DefaultColumnFilter from './DefaultColumnFilter'\nfunction App() {\n  const [randomUserTableData, setRandomUserTableData] = useState({\n    loading:true, data:[]\n  })\n  useEffect(() => {\n    fetch(\"https://randomuser.me/api/?results=20\")\n      .then((response) => response.json())\n      .then((response) => {\n        setRandomUserTableData({\n          data: response.results,\n          loading: false\n        })\n      })\n  }, [])\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'gender',\n        accessor: 'gender',\n      },\n      {\n        Header: 'firstName',\n        accessor: 'name.first', // accessor is the \"key\" in the data\n      },\n      {\n        Header: 'lastName',\n        accessor: 'name.last',\n      },\n          ],\n    []\n  )\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter,\n    }),\n    []\n  )\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({ columns, data:randomUserTableData.data, defaultColumn}, useFilters, useSortBy)\n\n\n  if (randomUserTableData.loading) {\n    return (\n      <div>loading...</div>\n    )\n  }\n\n\n  return (\n    <Fragment>\n       <table {...getTableProps()} style={{ border: 'solid 1px blue' }}>\n       <thead>\n         {headerGroups.map(headerGroup => (\n           <tr {...headerGroup.getHeaderGroupProps()}>\n             {headerGroup.headers.map(column => (\n               <th\n                 {...column.getHeaderProps(column.getSortByToggleProps())}\n                 style={{\n                   borderBottom: 'solid 3px red',\n                   background: 'aliceblue',\n                   color: 'black',\n                   fontWeight: 'bold',\n                 }}\n               >\n                 {column.render('Header')}\n                 <div>{column.canFilter ? column.render('Filter') : null}</div>\n                 {column.isSorted\n                      ? column.isSortedDesc\n                        ? ' ðŸ”½'\n                        : ' ðŸ”¼'\n                      : ''}\n               </th>\n             ))}\n           </tr>\n         ))}\n       </thead>\n       <tbody {...getTableBodyProps()}>\n         {rows.map(row => {\n           prepareRow(row)\n           return (\n             <tr {...row.getRowProps()}>\n               {row.cells.map(cell => {\n                 return (\n                   <td\n                     {...cell.getCellProps()}\n                     style={{\n                       padding: '10px',\n                       border: 'solid 1px gray',\n                       background: 'papayawhip',\n                     }}\n                   >\n                     {cell.render('Cell')}\n                   </td>\n                 )\n               })}\n             </tr>\n           )\n         })}\n       </tbody>\n     </table>\n    </Fragment>\n  )\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n//If you want to start measuring performance in your app, pass a function\n//to log results (for example: reportWebVitals(console.log))\n//or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n//serviceWorker.unregister();"],"sourceRoot":""}